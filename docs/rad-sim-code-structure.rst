Code Structure
==============

Overview
--------

The code structure of RAD-Sim is summarized as follows:

.. code-block:: text

    rad-sim/
    |- sim/
    |  |- dram/
    |  |  |- DRAMsim3/
    |  |  |- mem_controller.{cpp/hpp}
    |  |- noc/
    |  |  |- booksim/
    |  |  |- aximm_interface.hpp
    |  |  |- axis_interface.hpp
    |  |  |- aximm_master_adapter.{cpp/hpp}
    |  |  |- aximm_slave_adapter.{cpp/hpp}
    |  |  |- axis_master_adapter.{cpp/hpp}
    |  |  |- axis_slave_adapter.{cpp/hpp}
    |  |  |- noc_utils.{cpp/hpp}
    |  |  |- sc_flit.{cpp/hpp}
    |  |  |- radsim_noc.{cpp/hpp}
    |  |- design_context.{cpp/hpp}
    |  |- radsim_config.{cpp/hpp}
    |  |- radsim_defines.hpp
    |  |- radsim_module.{cpp/hpp}
    |  |- radsim_telemetry.{cpp/hpp}
    |  |- radsim_utils.{cpp/hpp}
    |  |- main.cpp
    |- example-designs/
    |  |- mydesign/
    |  |  |- modules/
    |  |  |- config.yml
    |  |  |- mydesign_driver.{cpp/hpp}
    |  |  |- mydesign_system.{cpp/hpp}
    |  |  |- mydesign_top.{cpp/hpp}
    |  |  |- mydesign.clks
    |  |  |- mydesign.place
    |- test/

It consists of three main directories:

* ``sim``: contains all the RAD-Sim simulation infrastructure
* ``example-designs``: contains all application designs simulated in RAD-Sim
* ``test``: contains all the testing scripts 

Simulator Infrastructure (``sim``)
----------------------------------
This directory includes all the RAD-Sim simulation infrastructure and utilities:

* The ``noc`` directory which contains everything related to the NoC modeling:

    * `Booksim 2.0 <https://ieeexplore.ieee.org/document/6557149>`_ NoC simulator source code.
    * Definitions of the AXI memory mapped (AXI-MM) and streaming (AXI-S) interfaces (``{aximm/axis}_interface.hpp``).
    * SystemC implementation of the AXI-MM and AXI-S NoC adapters (``{aximm/axis}_{master/slave}_adapter.{cpp/hpp}``). These adapters present AXI-MM/AXI-S interfaces for the Booksim NoC to the SystemC application modules. They also perform functionalities such as width adaptation and clock-domain crossing between the application modules and the NoC.
    * Bit-level definitions of the NoC flit and packet (``sc_flit.{cpp/hpp}``).
    * NoC-related utility functions (``noc_utils.{cpp/hpp}``).
    * SystemC wrapper for the NoC (Booksim NoC + Adapters) to be instantiated in application designs (``radsim_noc.{cpp/hpp}``).

* The ``dram`` directory contains everything related to external memory modeling in RAD-Sim: 

    * `DRAMsim3 <https://ieeexplore.ieee.org/document/8999595>`_ memory simulator source code.
    * SystemC wrapper for DRAMsim that presents an AXI-MM interface and implements functionality book-keeping to be instantiated in application designs (``mem_controller.{cpp/hpp}``).

* The ``RADSimDesignContext`` class in ``design_context.{cpp/hpp}`` which stores all the details of a RAD-Sim design such as NoCs and modules of the design, their clocks, module NoC placement, and connections between modules and NoC adapters. For each RAD-Sim simulation, there is a single global variable of this class type (``radsim_design``) that stores these information to be used from any part of the simulator.

* The ``RADSimConfig`` class in ``radsim_config.{cpp/hpp}`` which stores all the RAD-Sim configuration parameters.

* RAD-Sim constant definitions in ``radsim_defines.hpp``. This header file is automatically generated by the RAD-Sim configuration script (``config.py``).

* The ``RADSimModule`` class in ``radsim_module.{cpp/hpp}`` which implements an abstract class from which all RAD-Sim application modules are derived. This class stores information about each module in the design such as its name, its clock, pointers to its AXI-MM/AXI-S ports and their data widths. Each module in the application design must implement the pure virtual funtion ``RegisterModuleInfo()`` with adds the module AXI-MM and AXI-S master/slave ports to the ``RADSimDesignContext`` class.

* Logging and trace recording functions and classes in ``radsim_telemetry.{cpp/hpp}``.

    * The ``NoCTransactionTrace`` and ``NoCTransactionTelemetry`` for collecting NoC statistics.
    * The ``SimLog`` class for logging simulator messages. 
    * The ``SimTraceRecording`` class for recording timestamps at any time during the simulation and dumping them as simulation traces at the end of the simulation.

* Utility functions functions and struct definitions in ``radsim_utils.{cpp/hpp}``.

* The ``main.cpp`` file which declares all the global variables, instantiates the system to be simulated and starts the SystemC simulation.

Application Designs (``example-designs``)
-----------------------------------------

This directory includes the user application designs that will be simulated in RAD-Sim. Each application design has its 
own sub-directory (``<design_name>/``) which must contain the following files/directories.

Modules Directory (``modules/``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This directory includes the SystemC definitions of all the modules in the design. All these modules have to be derived 
from the ``RADSimModule`` abstract class. If a module is to be attached to the NoC, it must have AXI-MM and/or AXI-S 
ports which are defined in the ``sim/{aximm|axi_s}_interface.hpp`` files.

Design Top-level (``<design_name>_top.{cpp/hpp}``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These files define a SystemC module (``sc_module``) that instantiates all the modules in the design and connects any 
non-NoC signals between the modules in its constructor using conventional SystemC syntax. At the end of its constructor, 
it must include the following lines of code to build the design context, create the system NoCs, and automatically 
connect the ports of NoC-attached modules to the NoC based on the NoC placement file:

.. code-block:: c++

    // mydesign_top Constructor
    mydesign_top::mydesign_top(const sc_module_name &name): sc_module(name) {
        
        // Module Instantiations and Connections Start Here
        // ...
        // Module Instantiations and Connections End Here

        radsim_design.BuildDesignContext("mydesign.place", "mydesign.clks");
        radsim_design.CreateSystemNoCs(rst);
        radsim_design.ConnectModulesToNoC();
    }

The design top-level SystemC module will typically have input/output ports (``sc_in/sc_out``) which will be used to 
communicate with the design testbench/driver.

Design Testbench (``<design_name>_driver.{cpp/hpp}``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These files define a SystemC module (``sc_module``) that acts as the testbench/driver of the design top-level module. 
It has two SystemC threads (``SC_CTHREAD``): a ``source`` thread that sends inputs to the design top-level input ports 
and a ``sink`` thread that listens on the design top-level output ports to receive outputs. A common scenario is that 
this driver module performs the following steps:

1. Parse test inputs and golden outputs from files
2. Use the ``source`` thread to send inputs to design top-level when ready
3. Use ``sink`` thread to listen for outputs from the design top-level when available
4. Compare received outputs to golden outputs to verify functionality
5. Stop simulation when all outputs are received

Design System (``<design_name>_system.{cpp/hpp}``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This is a simple SystemC module (``sc_module``) that instantiates and connects the design top-level and simulation 
driver modules. This is the single module that will be instantiated inside the ``sc_main()`` function in the 
``main.cpp`` file.

Clock Settings File (``<design_name>.clks``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This file defines the operating clock frequency of the module's NoC adapters and the module itself for each of the 
modules instantiated in the design. Each line of this file should have a module name followed by two integers (all 
space-separated) as shown in the example below. 

.. code-block:: bash

    module_a 0 1
    module_b 0 0

The two integers in each line represent the indecies to the NoC adapters and design clock period values listed in the 
design's ``config.yml`` file. For example, if the ``config.yml`` file, had the following values, it means that the NoC 
adapters of both modules are operating at 1.25 ns clock period (800 MHz), while ``module_a`` has a clock period of 
2.5 ns (400 MHz) and ``module_b`` has a clock period of 5.0 ns (200 MHz).

.. code-block:: yaml

    noc_adapters:
        clk_period: [1.25 2.5]

    design:
        name: 'mydesign'
        noc_placement: ['mydesign.place']
        clk_periods: [5.0 2.5]

.. note::
   RAD-Sim design modules so far do not support more than one clock and all their adapters are restricted to use the 
   same clock as well (i.e. a single module cannot connect to multiple NoC adapters running at different clock speeds).


NoC Placement File (``<design_name>.place``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This file defines the placement of the design modules relative to the NoC. In other words, which NoC router each design 
module port connects to. An example NoC placement file is shown below. Each line has a port name followed by 
the NoC ID it is connected to (in case multiple NoCs exist in the system), the node ID it is attached to, and the type 
of the interface as AXI-MM or AXI-S (all space-separated) as shown in the example below. 

.. code-block:: bash

    module_a 0 0 axis
    module_b.port_a 0 3 aximm
    module_b.port_b 0 7 aximm

For a mesh NoC, Booksim assumes a row-major ordering of the NoC router IDs with the top-left router has ID :math:`0` 
and the bottom-right router has ID :math:`N^2-1` for an :math:`N \times N` mesh. Only for modules with all AXI-S 
interfaces, it is possible to only write the module name and this will result in all its ports to be connected to the 
same NoC router with arbitration logic between them.

CMakeLists File (``CMakeLists.txt``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This is a convntional CMakeLists file that lists all your modules, top, driver, and system header and source files 
for CMake to compile correctly when you build RAD-Sim for the application design. For a new application design, it is 
recommended that you copy the ``CMakeLists.txt`` file from one of the provided example design directories and edit the 
``hdrfiles`` and ``srcfiles`` variables to include all your design ``.hpp`` and ``.cpp`` files. 

RAD-Sim Configuration File (``config.yml``)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This YAML file configures all the RAD-Sim parameters for the simulation of the application design under 4 main tags: 
``noc``, ``noc_adapters``, ``design``, and ``telemetry``. An example configuration file is shown below, followed by 
an explanation for each configuration parameter.

.. code-block:: yaml

    noc:
        type: ['2d']
        num_nocs: 1
        clk_period: [1.0]
        payload_width: [166]
        topology: ['mesh']
        dim_x: [4]
        dim_y: [4] 
        routing_func: ['dim_order']
        vcs: [5]
        vc_buffer_size: [8]
        output_buffer_size: [8]
        num_packet_types: [5]
        router_uarch: ['iq']
        vc_allocator: ['islip']
        sw_allocator:  ['islip']
        credit_delay: [1]
        routing_delay: [1]
        vc_alloc_delay: [1]
        sw_alloc_delay: [1]

    noc_adapters:
        clk_period: [1.25]
        fifo_size: [16]
        obuff_size: [2]
        in_arbiter: ['fixed_rr']
        out_arbiter: ['priority_rr']
        vc_mapping: ['direct']

    design:
        name: 'aximm_hello_world'
        noc_placement: ['aximm_hello_world.place']
        clk_periods: [5.0]

    telemetry:
        log_verbosity: 2
        traces: []

**NoC Configuration Parameters**

:menuselection:`type`

:menuselection:`num_nocs`

:menuselection:`clk_period`

:menuselection:`payload_width`

:menuselection:`topology`

:menuselection:`dim_x` and :menuselection:`dim_y`

:menuselection:`routing_func`

:menuselection:`vcs`

:menuselection:`vc_buffer_size`

:menuselection:`output_buffer_size`

:menuselection:`num_packet_types`

:menuselection:`router_uarch`

:menuselection:`vc_allocator`

:menuselection:`sw_allocator`

:menuselection:`credit_delay`

:menuselection:`routing_delay`

:menuselection:`vc_alloc_delay`

:menuselection:`sw_alloc_delay`

**NoC Adapters Configuration Parameters**

:menuselection:`clk_period`

:menuselection:`fifo_size`

:menuselection:`obuff_size`

:menuselection:`in_arbiter`

:menuselection:`out_arbiter`

:menuselection:`vc_mapping`

**Design Configuration Parameters**

:menuselection:`name`

:menuselection:`noc_placement`

:menuselection:`clk_periods`

**Telemetry Configuration Parameters**

:menuselection:`log_verbosity`

:menuselection:`traces`

Testing Scripts (``test``)
--------------------------
